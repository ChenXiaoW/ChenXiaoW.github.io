<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenxiaow.github.io</id>
    <title>野鹤</title>
    <updated>2021-08-01T01:51:23.976Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenxiaow.github.io"/>
    <link rel="self" href="https://chenxiaow.github.io/atom.xml"/>
    <subtitle>路漫漫其修远兮</subtitle>
    <logo>https://chenxiaow.github.io/images/avatar.png</logo>
    <icon>https://chenxiaow.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 野鹤</rights>
    <entry>
        <title type="html"><![CDATA[关于HotSpot虚拟机的对象内存布局]]></title>
        <id>https://chenxiaow.github.io/guan-yu-hotspot-xu-ni-ji-de-dui-xiang-nei-cun-bu-ju/</id>
        <link href="https://chenxiaow.github.io/guan-yu-hotspot-xu-ni-ji-de-dui-xiang-nei-cun-bu-ju/">
        </link>
        <updated>2021-07-31T12:20:53.000Z</updated>
        <summary type="html"><![CDATA[<p>关于Java对象在内存中结构的简单描述😜请多多指教</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于Java对象在内存中结构的简单描述😜请多多指教</p>
<!-- more -->
<p>在<code>HotSpot</code>虚拟机中，对象在堆内存中的存储布局可以划分为三个部分：</p>
<ul>
<li>对象头（header）</li>
<li>实例数据（Instance Data）</li>
<li>对齐填充（Padding）<br>
<img src="https://chenxiaow.github.io/post-images/1627745675512.png" alt="" loading="lazy"></li>
</ul>
<h2 id="对象头">对象头</h2>
<p><strong>对象头包含两部分信息</strong>：<code>Mark Word</code>和类型指针（<code>klass pointer</code>）；</p>
<h3 id="mark-word">Mark Word</h3>
<p>用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁ID、偏向时间戳等<br>
<strong>组成</strong><br>
<img src="https://chenxiaow.github.io/post-images/1627734528343.png" alt="Mark Word 信息" loading="lazy"></p>
<ul>
<li>锁标记位（lock）：区分锁状态，<code>11</code>时表示对象等待GC回收状态，只有最后两位锁标志位有效</li>
<li>偏向锁标记（biased_lock）：是否偏向锁，由于无锁和偏向锁的锁标识都是<code>01</code>，没办法区分，所以这里引入了一位的偏向锁标识位</li>
<li>分代年龄（age）：表示对象被GC的次数，当该次数达到阈值的时候，对象就会转移到老年代；
<ul>
<li>由于只给了<code>age</code>四个<code>bit</code>的空间，所以阈值最高只能为15，多了没地方存。</li>
</ul>
</li>
<li>hashcode：运行期间调用<code>System.identityHashCode()</code>来计算（采用延迟计算的方式），并把结果赋值到这里；当处于重量级锁状态下，<code>hashcode</code>会转移到<code>Monitor</code>中</li>
<li>偏向锁的线程ID（thread）：用于记录偏向锁所偏向的线程。</li>
<li>epoch：验证偏向锁有效性的时间戳</li>
<li>ptr_to_lock_record：轻量级锁状态下，指向栈中锁记录(lock_record)的指针</li>
<li>ptr_to_heavyweight_monitor：重量级锁状态下，指向对象监视器<code>Monitor</code>的指针。</li>
</ul>
<h3 id="klass-pointer">klass pointer</h3>
<p>类型指针，即对象指向它类型元数据的指针，jvm通过这个指针来确定该对象是哪个类的实例；如果对象是一个数组，那么在对象头中还必须有一块用于记录数组长度的数据，这样jvm就可以通过普通java对象的元数据信息来确定对象的大小，但如果长度不确定，将无法通过对象头信息推断出数组的大小；<br>
什么意思呢？你有一个Persion实例的引用，那么就可以通过它来找到元空间中相应的元数据了。<br>
<img src="https://chenxiaow.github.io/post-images/1627743715187.png" alt="" loading="lazy"></p>
<h2 id="实例数据">实例数据</h2>
<p>对象真正存储的有效信息，即我们在类中定义的各种类型的字段内容，无论是继承的，还是在子类中定义的字段都必须记录起来</p>
<h2 id="对齐填充">对齐填充</h2>
<p>没有什么特别的意义，仅仅起着占位符的作用。由于 HotSpot 虚拟机的自动内存管理系统要求对象起始地址 必须是8字节的整数倍，也就是对象的大小必须是8字节的整数倍，因此如果对象的实例数据部分没有对齐的话，就需要通过对齐填充来补全，达到8字节的整数倍要求。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages+Gridea部署个人博客]]></title>
        <id>https://chenxiaow.github.io/github-pagesgridea-bu-shu-ge-ren-bo-ke/</id>
        <link href="https://chenxiaow.github.io/github-pagesgridea-bu-shu-ge-ren-bo-ke/">
        </link>
        <updated>2021-07-26T05:02:31.000Z</updated>
        <summary type="html"><![CDATA[<p>源于生活，记录生活</p>
]]></summary>
        <content type="html"><![CDATA[<p>源于生活，记录生活</p>
<!-- more -->
<h1 id="准备工作">准备工作</h1>
<ul>
<li><code>github</code> 账号</li>
<li>安装<code>Gridea</code>：<a href="https://gridea.dev/">下载地址</a></li>
</ul>
<h1 id="github相关操作">github相关操作</h1>
<ul>
<li>创建仓库用于存放博客文件<br>
<img src="https://chenxiaow.github.io/post-images/1627279835455.png" alt="" loading="lazy"><br>
注意事项：</li>
</ul>
<ol>
<li>仓库名尽量以：username+<code>github.io</code>的形式，在访问的时候就可以直接以<code>https://username.github.io</code> 访问，如果<code>username</code>不是你的github用户名的话(如上图)，那么访问方式就是 <code>https://username.github.io/repository_name</code></li>
<li>仓库需要以公共仓库的形式创建</li>
</ol>
<ul>
<li>
<p>设置仓库<br>
<img src="https://chenxiaow.github.io/post-images/1627282293409.png" alt="" loading="lazy"><br>
选定主题后就可以通过 <code>https://ChenXiaoW.github.io/ChenXiao.github.io</code>访问</p>
</li>
<li>
<p>创建结果<br>
<img src="https://chenxiaow.github.io/post-images/1627283058280.png" alt="" loading="lazy"></p>
</li>
<li>
<p>访问结果<br>
<img src="https://chenxiaow.github.io/post-images/1627283083130.png" alt="" loading="lazy"></p>
</li>
</ul>
<h1 id="gridea配置">Gridea配置</h1>
<figure data-type="image" tabindex="1"><img src="https://chenxiaow.github.io/post-images/1627282878239.png" alt="" loading="lazy"></figure>
<ul>
<li>配置域名：</li>
<li>仓库名称</li>
<li>分支</li>
<li>仓库用户名（github用户名）</li>
<li>邮箱</li>
<li>令牌：<code>Settings-&gt; Developer settings -&gt; Personal access tokens</code> 中创建</li>
</ul>
<p>配置完以后检测连接，检测通过后进行同步（可能会因网络问题导致同步失败）。<br>
如果顺利的话到此就完成部署了。</p>
<h1 id="主题更换">主题更换</h1>
<p><a href="https://gridea.dev/themes">主题下载</a><br>
下载完成后复制到站点源文件路径下的<code>themes</code>目录中<br>
<img src="https://chenxiaow.github.io/post-images/1627300787410.png" alt="" loading="lazy"><br>
然后在主题设置中设置并保存，重启<code>Gridea</code>，最后再同步到远程仓库中，等待几分钟就可以了。</p>
<h1 id="博客发布">博客发布</h1>
<p>编辑完博客以后的发布</p>
<ul>
<li>方式1：通过同步的方式发布，但由于网络问题（😜都懂的）会发布失败。</li>
<li>方式2：熟悉<code>git</code>的同学可以打开通过站点源文件路径下的<code>output</code>文件夹，打开<code>git bash</code>,直接通过<code>commit&amp;push</code> 的方式推送到远程仓库。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://chenxiaow.github.io/hello-gridea/</id>
        <link href="https://chenxiaow.github.io/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>